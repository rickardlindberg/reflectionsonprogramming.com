---
layout: post
title: Hello world in Haskell and GTK
categories:
  - org-app-series
---

In this post I explain how I got started writing code for the "file organization application":/2012/01/application-development-series-intro/. I describe the first two commits and the thoughts behind them.

h2. Starting with a skeleton

Since I was unfamiliar with the technologies that I had chosen, my first goal was to get a hello world program working. If I can get that working, I gain confidence that I can use the technologies together.

In this case, the technologies were Haskell and GTK (with Haskell bindings). I had played with Haskell before but was completely new to GTK (although not to event-driven GUI programming).

I copied a hello world example from the "Gtk2Hs": website and pasted into a source file. It looked like this:

{% highlight haskell %}
import Graphics.UI.Gtk

main = do
    initGUI
    window <- windowNew
    button <- buttonNew
    set window [ containerBorderWidth := 10, containerChild := button ]
    set button [ buttonLabel := "Hello World" ]
    onClicked button (putStrLn "Hello World")
    onDestroy window mainQuit
    widgetShowAll window
    mainGUI
{% endhighlight %}

Compiling was easy once I had downloaded the required libraries. They were all available through the package management system on my GNU/Linux system. I made a script for compiling so that I wouldn't have to remember how to do it:

{% highlight bash %}
ghc --make Main.hs -o org-app
{% endhighlight %}

(The make flag tells ghc to figure out all dependencies so you only need to specify the top level program you wish to compile. When you compile your projects multiple times, ghc will only recompile files that have changed.)

And that was the first commit: a working skeleton on which to build. I could now easily explore features of GTK and GUI programming in Haskell by playing around with the hello world program.

h2. Using glade to design the GUI

The hello world program constructs the GUI in code by creating widgets and manually placing them on a window:

{% highlight haskell %}
window <- windowNew
button <- buttonNew
set window [ containerBorderWidth := 10, containerChild := button ]
set button [ buttonLabel := "Hello World" ]
{% endhighlight %}

I've had experiences designing GUIs like this and it's quite tedious. It takes a long time to get all parameters right so that your windows look the way you imagined. The code also becomes rather long and messy.

For GTK, there is a tool called "Glade":http://glade.gnome.org/ which lets you design your widgets visually and then load them from an xml file in code.

    image

I wanted to try this approach. I decided to see if I could transform the hello world example from the first commit using Glade. I came up with this:

{% highlight haskell %}
import Graphics.UI.Gtk
import Graphics.UI.Gtk.Builder

main = do
    initGUI

    builder <- builderNew
    builderAddFromFile builder "interface.glade"

    mainWindow <- builderGetObject builder castToWindow "main_window"
    onDestroy mainWindow mainQuit

    helloWorldButton <- builderGetObject builder castToButton "hello_world_button"
    onClicked helloWorldButton (putStrLn "Hello World")

    widgetShowAll mainWindow
    mainGUI
{% endhighlight %}

Now the widgets are loaded from the xml file `interface.glade` and we only have to hook up the event handlers. The text and position of the hello world button is stored in the glade file. Instead of this:

{% highlight haskell %}
window <- windowNew
button <- buttonNew
set window [ containerBorderWidth := 10, containerChild := button ]
set button [ buttonLabel := "Hello World" ]
{% endhighlight %}

We have this:

{% highlight haskell %}
mainWindow <- builderGetObject builder castToWindow "main_window"
helloWorldButton <- builderGetObject builder castToButton "hello_world_button"
{% endhighlight %}

This doesn't look like less code (it's actually the exact same number of lines in total), but when the GUI gets more complex, I think this will pay off.

And that was the second commit.

h2. Confident to move forward

At this point there are no tests or no code specific to the application. But the code proves that these technologies can be used together, and I've gained confidence that I can move forward.
